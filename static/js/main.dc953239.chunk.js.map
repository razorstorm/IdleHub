{"version":3,"sources":["components/ScoreDisplay.tsx","components/CommitButton.tsx","components/UpgradeButton.tsx","components/DevWorkDisplay.tsx","components/SaveProgressDisplay.tsx","components/Devs.tsx","logic/GameUtils.tsx","components/GameScreen.tsx","logic/Player.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["ScoreDisplay","this","props","stars","player","starsPerCommit","React","Component","CommitButton","state","clicked","makeCommit","screen","forceUpdate","setState","className","onAnimationEnd","onMouseUp","bind","onMouseDown","onClick","clickHandler","UpgradeButton","canBuyCommitUpgrade","buyCommitUpgrade","displayOpacity","style","opacity","getCommitUpgradeCost","DevWorkDisplay","displayPercent","percentage","label","toFixed","msPerDev","fluid","devs","starPerDev","Col","ProgressBar","animated","now","SaveProgressDisplay","savePercentage","timeUntilSave","Dev","devLevelClicked","devClicked","buyDev","buyDevLevel","levelClassName","canBuyDev","devLevelDisplayOpacity","canBuyDevLevel","onDevUp","onDevDown","getDevCost","onDevLevelUp","onDevLevelDown","buyDevLevelHandler","getDevLevelCost","GameUtils","currLevel","Math","ceil","prestigeBonus","commitUpgradeLevel","devLevel","JSON","stringify","data","playerData","parse","Object","assign","Player","amount","max","devCostScaling","devLevelCostScaling","cost","loseStars","devTimeScaling","devStarScaling","commitUpgradeCostScaling","commitUpgradeMultiplierScaling","starsToGain","gainStars","console","log","GameScreen","lastTrigger","lastSaved","Date","setInterval","gameTick","localStorage","getItem","deserialize","Container","Devs","ticksNeeded","newTime","frameDiff","getTime","saveFrameDiff","newState","min","saveGame","setItem","serialize","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dc953239.chunk.js","sourcesContent":["import React, { ReactNode } from 'react';\nimport '../App.css';\nimport { player } from './GameScreen';\n\ninterface Props {\n    stars: number\n}\n\nclass ScoreDisplay extends React.Component<Props> {\n    render(): ReactNode {\n        return (\n            <section>\n                Congratulations! Your followers have given you {this.props.stars} stars for your repo!\n\n                You are currently making {player.starsPerCommit()} stars per commit!\n            </section>\n        );\n    }\n}\n\nexport default ScoreDisplay;\n","import React, { ReactNode } from 'react';\nimport '../App.css';\nimport GameScreen, { player } from './GameScreen';\n\ninterface Props {\n    screen: GameScreen\n}\n\ninterface IState {\n    clicked: boolean;\n}\n\nclass CommitButton extends React.Component<Props, IState> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            clicked: false\n        };\n    }\n\n    clickHandler() {\n        player.makeCommit();\n        this.props.screen.forceUpdate();\n    }\n\n    onMouseUp() {\n        this.setState({ clicked: false });\n    }\n\n    onMouseDown() {\n        this.setState({ clicked: true });\n    }\n\n    render(): ReactNode {\n        const className = this.state.clicked ? 'animated upgradeButton' : 'upgradeButton'\n        return (\n            <section className={className} onAnimationEnd={this.onMouseUp.bind(this)} onMouseDown={this.onMouseDown.bind(this)} onClick={this.clickHandler.bind(this)}>\n                Make Commit!\n            </section>\n        );\n    }\n}\n\nexport default CommitButton;\n","import React, { ReactNode } from 'react';\nimport '../App.css';\nimport GameScreen, { player } from './GameScreen';\n\ninterface Props {\n    screen: GameScreen\n}\n\nclass UpgradeButton extends React.Component<Props> {\n    clickHandler() {\n        if (player.canBuyCommitUpgrade()) {\n            player.buyCommitUpgrade();\n            this.props.screen.forceUpdate();\n        }\n    }\n\n    render(): ReactNode {\n        const displayOpacity = player.canBuyCommitUpgrade() ? '100%' : '20%';\n        return (\n            <section className=\"upgradeButton\" style={{ opacity: displayOpacity }} onClick={this.clickHandler.bind(this)}>\n                Upgrade your commits with {player.getCommitUpgradeCost()} stars!\n            </section>\n        );\n    }\n}\n\nexport default UpgradeButton;\n","import React, { ReactNode } from 'react';\nimport '../App.css';\nimport GameScreen, { player } from './GameScreen';\nimport { ProgressBar, Col } from 'react-bootstrap';\n\ninterface Props {\n    screen: GameScreen,\n    percentage: number\n}\n\ninterface IState {\n}\n\nclass DevWorkDisplay extends React.Component<Props, IState> {\n    render(): ReactNode {\n        let className = 'devProgress';\n        let animated = true;\n        let displayPercent: number = this.props.percentage;\n        let label = `${displayPercent.toFixed(2)} %`\n        if (player.msPerDev() < 400) {\n            displayPercent = 100;\n            label = '';\n        }\n        if (player.msPerDev() < 700 || displayPercent > 90 || displayPercent < 25) {\n            className = 'fast-bar';\n        }\n\n        return (\n            <div {...{ fluid: \"sm\" }} className='container devBar'>\n                <section>\n                    {player.devs} devs making {player.starPerDev()} stars per {(player.msPerDev() / 1000).toFixed(2)} seconds.\n                </section>\n                <Col>\n                    <ProgressBar animated={animated} className={className} now={displayPercent} label={label} />\n                </Col>\n            </div>\n\n        );\n    }\n}\n\nexport default DevWorkDisplay;\n","import React, { ReactNode } from 'react';\nimport '../App.css';\nimport GameScreen from './GameScreen';\nimport { ProgressBar, Col } from 'react-bootstrap';\n\ninterface Props {\n    screen: GameScreen,\n    savePercentage: number,\n    timeUntilSave: number\n}\n\ninterface IState {\n}\n\nclass SaveProgressDisplay extends React.Component<Props, IState> {\n    render(): ReactNode {\n        return (\n            <div {...{ fluid: \"sm\" }} className='container devBar'>\n                <section>\n                    Time until AutoSave\n                </section>\n                <Col>\n                    <ProgressBar className=\"devProgress\" animated now={this.props.savePercentage} label={`${this.props.timeUntilSave / 1000} seconds`} />\n                </Col>\n            </div>\n\n        );\n    }\n}\n\nexport default SaveProgressDisplay;\n","import React, { ReactNode } from 'react';\nimport '../App.css';\nimport GameScreen, { player } from './GameScreen';\n\ninterface Props {\n    screen: GameScreen,\n    devs: number\n}\n\ninterface IState {\n    devClicked: boolean,\n    devLevelClicked: boolean,\n}\n\nclass Dev extends React.Component<Props, IState> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            devLevelClicked: false,\n            devClicked: false\n        };\n    }\n\n    clickHandler() {\n        player.buyDev();\n        this.props.screen.forceUpdate();\n    }\n\n    buyDevLevelHandler() {\n        player.buyDevLevel();\n        this.props.screen.forceUpdate();\n    }\n\n    onDevUp() {\n        this.setState({ devClicked: false });\n    }\n\n    onDevLevelUp() {\n        this.setState({ devLevelClicked: false });\n    }\n\n    onDevDown() {\n        this.setState({ devClicked: true });\n    }\n\n    onDevLevelDown() {\n        this.setState({ devLevelClicked: true });\n    }\n\n    render(): ReactNode {\n        const className = this.state.devClicked ? 'animated upgradeButton' : 'upgradeButton';\n        const levelClassName = this.state.devLevelClicked ? 'animated upgradeButton' : 'upgradeButton';\n        const displayOpacity = player.canBuyDev() ? '100%' : '20%';\n        const devLevelDisplayOpacity = player.canBuyDevLevel() ? '100%' : '20%';\n        return (\n            <section>\n                <section className={className} style={{ opacity: displayOpacity }} onAnimationEnd={this.onDevUp.bind(this)} onMouseDown={this.onDevDown.bind(this)} onClick={this.clickHandler.bind(this)}>\n                    Buy dev for {player.getDevCost().toFixed(2)}\n                </section>\n                <section className={levelClassName} style={{ opacity: devLevelDisplayOpacity }} onAnimationEnd={this.onDevLevelUp.bind(this)} onMouseDown={this.onDevLevelDown.bind(this)} onClick={this.buyDevLevelHandler.bind(this)}>\n                    Buy dev level for {player.getDevLevelCost().toFixed(2)}\n                </section>\n            </section>\n\n        );\n    }\n}\n\nexport default Dev;\n","export class GameUtils {\n    static commitUpgradeCostScaling(currLevel: number): number {\n        return Math.ceil(2 ** currLevel);\n    }\n\n    static commitUpgradeMultiplierScaling(currLevel: number): number {\n        return Math.ceil(1.4 ** (currLevel - 1));\n    }\n\n    static devCostScaling(currLevel: number): number {\n        return Math.ceil(2 ** currLevel + 1.5 * currLevel + 100);\n        // return 1;\n    }\n\n    static devLevelCostScaling(currLevel: number): number {\n        return Math.ceil(2 ** currLevel + 1.5 * currLevel + 100);\n    }\n\n    static devTimeScaling(currLevel: number): number {\n        return 10 * 1000 / currLevel;\n    }\n\n    static devStarScaling(currLevel: number): number {\n        return Math.ceil(1.4 ** (currLevel - 1));\n    }\n}\n","import React, { ReactNode } from 'react';\nimport '../App.css';\nimport ScoreDisplay from './ScoreDisplay';\nimport CommitButton from './CommitButton';\nimport UpgradeButton from './UpgradeButton';\nimport DevWorkDisplay from './DevWorkDisplay';\nimport SaveProgressDisplay from './SaveProgressDisplay';\nimport Devs from './Devs';\nimport { Container } from 'react-bootstrap';\nimport Player from '../logic/Player';\n\nexport const player: Player = new Player();\n\ninterface State {\n    percentage: number,\n    savePercentage: number,\n    timeUntilSave: number\n}\n\ninterface Props {\n\n}\n\nclass GameScreen extends React.Component<Props, State> {\n    lastTrigger: Date\n    lastSaved: Date\n    constructor(props: object) {\n        super(props);\n        this.state = {\n            percentage: 0,\n            savePercentage: 0,\n            timeUntilSave: 0\n        };\n        this.lastTrigger = new Date();\n        this.lastSaved = new Date();\n    }\n\n    componentDidMount() {\n        setInterval(this.gameTick.bind(this), 50);\n        const data = localStorage.getItem('playerData');\n        if (data) {\n            player.deserialize(data);\n        }\n    }\n\n    render(): ReactNode {\n        return (\n            <Container>\n                <ScoreDisplay stars={player.stars} />\n                <CommitButton screen={this} />\n                <UpgradeButton screen={this} />\n                <DevWorkDisplay screen={this} percentage={this.state.percentage} />\n                <SaveProgressDisplay screen={this} savePercentage={this.state.savePercentage} timeUntilSave={this.state.timeUntilSave} />\n                <Devs screen={this} devs={player.devs} />\n            </Container>\n        );\n    }\n\n    gameTick() {\n        const ticksNeeded = player.msPerDev();\n        const saveMSNeeded = 10000;\n        const newTime = new Date();\n        const frameDiff = newTime.getTime() - this.lastTrigger.getTime();\n        const saveFrameDiff = newTime.getTime() - this.lastSaved.getTime();\n        let newState: State = {\n            percentage: 0,\n            savePercentage: 100 * (Math.min(saveFrameDiff, saveMSNeeded)) / saveMSNeeded,\n            timeUntilSave: Math.max(0, saveMSNeeded - saveFrameDiff),\n        };\n        if (player.devs > 0) {\n            newState.percentage = 100 * (Math.min(frameDiff, ticksNeeded)) / ticksNeeded;\n        }\n\n        this.setState(newState);\n\n        if (frameDiff >= ticksNeeded) {\n            this.lastTrigger = newTime;\n            player.gainStars(player.starPerDev());\n            this.forceUpdate();\n        }\n        if (saveFrameDiff >= saveMSNeeded) {\n            this.saveGame();\n            this.lastSaved = newTime;\n        }\n    }\n\n    saveGame() {\n        localStorage.setItem('playerData', player.serialize());\n    }\n}\n\nexport default GameScreen;\n","import { GameUtils } from './GameUtils';\n\n// StackOverFlow upgrade. Click to toggle whether to use SO, when using, have chance of reducing time between commits, but might lead to a 0 star commit due to \"IM NOT ANSWERING YOUR QUESTION YOUR APPROACH IS BAD GO AND REWRITE YOUR ENTIRE COMPANY'S 100 GB CODE BASE TO USE MY APPROACH THATS MARGINALLY BETTER, etc\"\ninterface PlayerData {\n    stars: number;\n    prestigeBonus: number;\n    commitUpgradeLevel: number;\n    devs: number;\n}\n\nclass Player {\n    stars: number;\n    prestigeBonus: number;\n    // by default one commit makes one star\n    commitUpgradeLevel: number;\n    devs: number;\n    devLevel: number;\n    constructor() {\n        this.stars = 0;\n        this.prestigeBonus = 0;\n        this.commitUpgradeLevel = 1;\n        this.devs = 0;\n        this.devLevel = 0;\n    }\n\n    serialize(): string {\n        return JSON.stringify(this);\n    }\n\n    deserialize(data: string) {\n        const playerData: PlayerData = JSON.parse(data);\n        Object.assign(this, playerData);\n    }\n\n    loadFromSave(): Player {\n        // todo deserialize\n        return new Player();\n    }\n\n    loseStars(amount: number) {\n        this.stars -= amount;\n        this.stars = Math.max(0, this.stars);\n    }\n\n    getDevCost(): number {\n        return GameUtils.devCostScaling(this.devs);\n    }\n\n    getDevLevelCost(): number {\n        return GameUtils.devLevelCostScaling(this.devLevel);\n    }\n\n    canBuyDev() {\n        return this.stars >= this.getDevCost();\n    }\n\n    buyDev() {\n        if (this.canBuyDev()) {\n            const cost = this.getDevCost();\n            this.loseStars(cost);\n            this.devs += 1;\n        }\n    }\n\n    canBuyDevLevel() {\n        return this.stars >= this.getDevLevelCost();\n    }\n\n    buyDevLevel() {\n        if (this.canBuyDevLevel()) {\n            const cost = this.getDevLevelCost();\n            this.loseStars(cost);\n            this.devLevel += 1;\n        }\n    }\n\n    msPerDev() {\n        return GameUtils.devTimeScaling(this.devs);\n    }\n\n    starPerDev() {\n        return GameUtils.devStarScaling(this.devLevel);\n    }\n\n    getCommitUpgradeCost(): number {\n        return GameUtils.commitUpgradeCostScaling(this.commitUpgradeLevel);\n    }\n\n    canBuyCommitUpgrade() {\n        return this.stars >= this.getCommitUpgradeCost();\n    }\n\n    buyCommitUpgrade() {\n        if (this.canBuyCommitUpgrade()) {\n            const cost = this.getCommitUpgradeCost();\n            this.loseStars(cost);\n            this.commitUpgradeLevel += 1;\n        }\n    }\n\n    starsPerCommit(): number {\n        return GameUtils.commitUpgradeMultiplierScaling(this.commitUpgradeLevel);\n    }\n\n    makeCommit() {\n        const starsToGain = this.starsPerCommit();\n        this.gainStars(starsToGain);\n        console.log(starsToGain, this.stars);\n    }\n\n    gainStars(stars: number) {\n        this.stars += stars;\n    }\n}\n\nexport default Player;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\n\nimport GameScreen from './components/GameScreen';\n\nexport function App() {\n    return (\n        <div className=\"App\">\n            {/* <header className=\"App-header\">\n            </header> */}\n            <GameScreen />\n        </div>\n    );\n}\n"],"sourceRoot":""}